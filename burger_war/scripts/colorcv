       capture = None
        frame = None
        imgR = imgG = imgB = None
        imgThreshold_R = imgThreshold_G = imgThreshold_B = None
        imgTmp = imgHSV = imgResult = None
        moments = None
        

        frame = Image
        frame = cv.CloneImage(frame)

        cv.Smooth(frame, frame, cv.CV_GAUSSIAN, 3, 3) 
        the_size = cv.GetSize(frame)

        imgR = cv.CreateImage(the_size, cv.IPL_DEPTH_8U, 1)
        imgG = cv.CreateImage(the_size, cv.IPL_DEPTH_8U, 1)
        imgB = cv.CreateImage(the_size, cv.IPL_DEPTH_8U, 1)
        imgThreshold_R = cv.CreateImage(the_size, cv.IPL_DEPTH_8U, 1)
        imgThreshold_G = cv.CreateImage(the_size, cv.IPL_DEPTH_8U, 1)
        imgThreshold_B = cv.CreateImage(the_size, cv.IPL_DEPTH_8U, 1)
        imgResult = cv.CreateImage(the_size, cv.IPL_DEPTH_8U, 1)
        imgTmp = cv.CreateImage(the_size, cv.IPL_DEPTH_8U, 1)
            
        cv.Split(frame, imgB, imgG, imgR, None) # BGRを分解
            
        # 赤の要素が100以上で、緑と青より1.5倍以上あるピクセルを抽出
        cv.Threshold(imgR, imgThreshold_R, 100, 255, cv.CV_THRESH_BINARY)
        cv.Div(imgR, imgG, imgTmp, 10) # 10倍
        cv.Threshold(imgTmp, imgThreshold_G, 15, 255, cv.CV_THRESH_BINARY)
        cv.Div(imgR, imgB, imgTmp, 10)
        cv.Threshold(imgTmp, imgThreshold_B, 15, 255, cv.CV_THRESH_BINARY)
        cv.And(imgThreshold_G, imgThreshold_B, imgTmp, None)
        cv.And(imgTmp, imgThreshold_R, imgResult, None)

        # cv.Moments(imgResult, moments, 0)
        moments = cv.Moments(cv.GetMat(imgResult, 1), 0)
        m00 = cv.GetSpatialMoment(moments, 0, 0)
        m10 = cv.GetSpatialMoment(moments, 1, 0)
        m01 = cv.GetSpatialMoment(moments, 0, 1)
        if (m00 != 0):
            gX = int(m10 // m00)
            gY = int(m01 // m00)
            cv.Circle(frame, (gX, gY), 80, (0, 0, 255), 6, 8, 0)
        else:
            imgHSV = cv.CreateImage(cv.GetSize(frame), cv.IPL_DEPTH_8U, 3)
            cv.CvtColor(frame, imgHSV, cv.CV_BGR2HSV) # Change the color format from BGR to HSV
            imgResult = GetThresholdedImage(imgHSV)
            cv.Smooth(imgResult, imgResult, cv.CV_GAUSSIAN, 3, 3) # smooth the binary image using Gaussian kernel
        cv2.imshow("Results", imgResult)
        cv2.imshow("Video", frame)

        OP = [gX,gY]
